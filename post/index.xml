<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 液态氧斯基•小小站</title>
    <link>https://ytysj.github.io/post/</link>
    <description>Recent content in Posts on 液态氧斯基•小小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 28 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ytysj.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>长安十二时辰是怎么打破次元壁的</title>
      <link>https://ytysj.github.io/post/2019/7-28-%E9%95%BF%E5%AE%89%E5%8D%81%E4%BA%8C%E6%97%B6%E8%BE%B0%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%93%E7%A0%B4%E6%AC%A1%E5%85%83%E5%A3%81%E7%9A%84/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/7-28-%E9%95%BF%E5%AE%89%E5%8D%81%E4%BA%8C%E6%97%B6%E8%BE%B0%E6%98%AF%E6%80%8E%E4%B9%88%E6%89%93%E7%A0%B4%E6%AC%A1%E5%85%83%E5%A3%81%E7%9A%84/</guid>
      <description>高中时候玩的一款法国游戏，可以一直联系到我姐姐大学老师，一位55年出生的奶奶？是不是很神奇，好像打破了次元壁？听我慢慢说来。
作为法国育碧最出名的IP之一，刺客信条以它自由开放的地图，多样化的任务达成模式，在那个大家都是线性剧情流程的时候，率先获得一大票人的喜爱。游戏中，玩家作为刺客，最大的特点就是可以飞檐走壁，爬墙揭瓦，从一点到另一任务点的过程中，和跑酷一样，可以选择任何方式行动。2代三部曲的剧情也是非常扣人心弦，荡气回肠。剧情最有趣的就是在一些真实的历史事件中，找到记载不详的地方，给他们按上刺客信条的故事背景——圣殿骑士和刺客组织的数千年对抗，来解释为什么会发生这些事件。再加上主角还能和那些历史上鼎鼎大名的人（达芬奇，马基雅维利，）接触，对我这种历史爱好者来说真的犹如满汉全席。
上了大学之后，在15年末的时候有人在知乎提问：“如果你来给《刺客信条》写剧情，你会把背景设定在哪里？”，16年2月，马伯庸给出一个回答，马伯庸恰恰也喜欢这款游戏，且他之前的不少著作，也会将真实事件作为主骨，用文学虚构的皮肉补足，写一些历史向的趣味小说。这个回答可不得了，反响也是非常之好。没过多久，马伯庸就在微博上宣布要开始扩写这个原型，将它写成一个完整的出版作品——《长安十二时辰》，并且在微博上连载，按每个时辰一篇连载，我当然是篇篇都看，一篇不落。然而，在更新了六七个时辰之后，马伯庸宣布后续内容将在正式出版的书中发布，网络连载暂停。这一团火，我就暂时按下。
18年，我在网易的蜗牛读书中偶然看到了长安十二时辰，心中的火再次升起。我当然是迫不及待地看完了这部小说，，由于一开始已经交代要在十二时辰内解决事件，所以心中一直有个定时炸弹在计时，所以真的是非常紧张刺激，丝丝入扣的剧情让人赞叹不已。恰巧，刚看完小说的我就得知，年底将会出影视剧《长安十二时辰》，看完预告片的我发现，非常非常对我胃口，符合我看小说时的期待，尤其是主角：雷佳音演的张小敬和易烊千玺演的李泌。
好事多磨，电视剧延期到19年播放，果不其然，服化道非常用心，剧中每个角色都活灵活现，真实生动，不是说配角就是一张脸谱。完全是按电影水准拍的每一集电视剧，称他为2019最优秀的电视剧也不为过。这么优秀的电视剧自然引爆舆论，不少平时不玩游戏也不看小说的人，也都和我一样看着张小敬和刺客信条里的Ezio一样飞檐走壁，驾马车奔走长安。
电视剧爆火，考据也就开始了，不少有趣的历史小知识纷纷出现。主角靖安司司丞李泌，他的老师贺知章，就是杭州萧山人，所谓“少小离家老大回，乡音无改鬓毛衰”，就是在说杭州话啊！小时候背的古诗变得很近很近了。而李泌他自己，也是三朝宰相，传奇人物，曾经做过杭州刺史，即杭州老市长。他是最早开发西湖的人，仅在杭州两年，他却做了无数功绩。他在杭州挖了6口井，靠暗渠引水入井，把淡水从西湖引入城内，也正是大家都因此可以聚居在湖东侧，西湖才被称作西湖。
 唐代杭州刺史李泌开挖六井的业绩，千百年来，一直被杭城市民传为佳话。李泌后升任宰相，杭城百姓便称它为相国井。
李泌是历史上第一个把西湖水用于居民生活的人，此给水系统为杭州城市的发展打下了良好的基础。以后的白居易、钱缪、陈襄、苏东坡等许多官员，不断对六井进行了疏浚和修缮，使六井的作用继续得以发挥。
　后来，由于杭州地下水质变好，人们就地掘井涌出的井水也能饮用，原有6井的功能逐渐减退。到了明代，6井中有4口井坏废，只有相国井和西井还存在。到了清代，相国井和西井也都废弃而被填埋。辛亥革命杭州光复后，人们在井亭桥畔相国井（井上有亭，井旁之桥称为井亭桥，横跨于清湖河&amp;lt;今浣纱路&amp;gt;之上，民国时一度称迎紫桥）原址用红砖砌了一个大井栏，留下了相国井的标记，使后人记住李泌的功绩。1987年，杭州市人民政府在原址修建了相国井，用白色大理石井圈护栏，并在旁边立石碑记其事，并将相国井定为杭州市重点文物保护单位。
　2003年，杭州市人民政府在湖滨三公园景区，建立李泌引西湖之水入口处引水装置和六井标志，以纪念为杭城百姓做出巨大贡献的唐代刺史李泌。
——来自杭州网-李泌与相国井
 李泌大概怎么也想不到，他的功绩，有一天是因为热播网剧流量小生，而走进1200年后的大众视野的。
和姐姐聊起这剧，我发给她李泌的故事，她回我这张图。百度了一下才知道，这位著作等身的作家王旭烽，还是她们学院的一名老师，世界此时变得这么这么小。完全可以这么说，是刺客信条的发布，促使王奶奶发了这个朋友圈，只不过，这个延时略微久了一点罢了。</description>
    </item>
    
    <item>
      <title>对香港事件的感触</title>
      <link>https://ytysj.github.io/post/2019/7-19-%E5%AF%B9%E9%A6%99%E6%B8%AF%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%84%9F%E8%A7%A6/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/7-19-%E5%AF%B9%E9%A6%99%E6%B8%AF%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%84%9F%E8%A7%A6/</guid>
      <description>时间线 最近香港事件闹得真的很凶。先整理一下大概的时间线。
2017年7月 香港青年潘晓颖陈同佳相识相恋
2018年2月8日 两人从香港赴台湾旅游
2018年2月16日 潘晓颖和陈同佳起争执，陈同佳将潘晓颖勒死后塞入行李箱
2018年2月17日 陈同佳搭乘捷运将装有潘晓颖尸体的行李箱遗弃在公园后，又用潘晓颖的银行卡提了两万新台币后，当晚逃回香港。
2018年3月11日 潘晓颖家人去台湾报案
2018年3月13日 香港警察拘捕陈同佳，他承认杀死潘晓颖并抛尸
2018年3月14日 台湾警方找到潘晓颖尸体，且腹中有胎儿，一尸两命
2018年12月13日 台湾通缉陈同佳，但因为香港和台湾无引渡协议，无法引渡受审。
2019年2月12日 香港立法会议员与潘晓颖母亲召开记者会，母亲说她希望香港可以修改法律堵上漏洞。
2019年2月13日 香港政府正式宣布提出修改《逃犯条例》和《刑事互助条例》，其中删除原有条文“引渡法例不适用于中国大陆、澳门和台湾”。
2019年3月31日 首次反对游行。
2019年4月3日 修例开始立法程序。
2019年4月5日 英国议会发声明反对。
2019年4月29日 陈同佳被香港政府判洗钱罪，监禁29个月，加上之前监禁时间，预计在2019年10月释放，香港对台湾发生的杀人案件无管辖权。
2019年5月30日 英国和加拿大联合声明。
2019年6月9日 游行。
2019年6月12日 发生警察与示威者冲突。美国总统特朗普在白宫会见媒体，在谈及香港就修订《逃犯条例》所引起的争议时他表示，相信香港政府和北京有能力解决问题。他还说，一百万人的示威是他见过最大规模的示威。
2019年6月15日 林郑月娥宣布暂缓修例。
2019年6月16日 人数最多的示威。号称200万，警方公布约35万。
2019年6月21日和27日 暴民围堵警察总部。
2019年7月1日 强撞立法会大门，占领、毁坏、涂鸦立法会一夜。有示威者向警方喷洒粉末：第四类危险品苯二胺。
2019年7月14日 沙田游行。当天晚上在沙田的新城市广场发生冲突，共有超过10名警察受伤。至少有2名警察有手指被折断。一名为咬断，一名为被钳夹断。
感触 我最初得知香港消息大概是6月12日之后，得知游行者宣布自己游行人数超百万，与警方的十几万相距甚远。一开始我觉得是根本闹不大的事情。
1.香港和美国、英国等很多国家都有引渡条例，偏偏和大陆、澳门、台湾没有条例，法律还自成一体，本身就是一个巨大的漏洞，修改这个条例简直是正常得不能再正常。何况港府知道会落人口实，再三强调和声明，仅对7年刑期以上的重刑犯引渡，而且政治犯不引渡，商业犯罪（除了贿赂）不引渡。
2.香港发生过占中事件，政府以及民众应该都有了解，会造成怎么样恶劣的后果都清楚，支持者应该是寥寥。林郑月娥开始强硬的态度，我觉得这事情就应该通过条例完事。
没想到，香港后面发生的完全出乎我的预料。简直就是当年的雨伞革命和太阳花学运的集合体，雨伞直接戳警察，扔铁棍、砖头、化学物质，围殴落单警察，甚至直接占领立法会。以寻求公义为借口，明目张胆地违法犯罪，抹黑警方维护治安的行为，褒扬自己破坏社会秩序的恶劣行为。这就是在直接攻击香港一直所宣传的核心价值——法治。
那么这到底是为什么？作为不负责任的猜测，中美贸易战角力，香港作为美国驻有最多外交人员的地方，自然不会放过这个能再掀起颜色革命的地方。所以再生硬的理由，在民主基金会的支持下也能强行闹大。根据特朗普所说“相信香港政府和北京有能力解决问题”，再加上他最擅长的极限施压，以及上任后的一切以美国利益为准的基调，美国应该只是想让香港小闹，并不会大力支持。同理还有英国的声明，仿佛在宣扬一下香港曾经的占有者是他。
根据香港警察方面的数据，最大人数应该在35万人左右，然后去除上面说的境外煽动，那么其实还是相当大的一个数字，不过不能代表主流民意。这群人到底是被利益驱使，还是被媒体洗脑灌输，抑或是真心觉得这个条例不能通过，需要违法伸张公义（这种人肯定是最少的），可以说明还是有相当一部分香港人在敌视，妖魔化大陆和大陆的制度法律。自之前港独事件之后，这样的人的声音由于爱国人士的发生，在不断弱化，但还没弱到毫无波澜的程度。
香港毕竟还是中国领土，我真心希望香港能继续保持一贯的法治、繁荣，但是底层人民生存困难，还有容易被外界肆意煽动，这些问题，大概目前的一国两制是没法解决的。都是中国人，希望大家都能一团和气的好好生活，而不是每天在泛政治化，非黑即白的舆论环境，暴徒不受管制打砸堵路的社会环境下瑟瑟发抖。</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;数组的初始化</title>
      <link>https://ytysj.github.io/post/2019/7-18-c%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/7-18-c%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>C/C++里面数组的初始化，一般是这样写的：
int a[4]={0,1,2,3};  即在初始化的时候对每个地址赋值。
为了方便初始化，C/C++如果这样写：
int a[4]={0};  不仅是a[0]初始化为0，剩下的地址也同时初始化为0。
然后因为这个特性，这几天我就以为这样写也可以：
int a[4]={1};  我以为这样写是4个地址都为1。而实际上，只有a[0]为1，其他的地址还是初始化为0。
要想所有地址都为1，还是得循环对每个地址单独赋值。</description>
    </item>
    
    <item>
      <title>numpy array小技巧</title>
      <link>https://ytysj.github.io/post/2019/7-18-numpy-array%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/7-18-numpy-array%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>python里的numpy的array有个小技巧，可以方便的处理数据
import numpy as np a=np.array([1,-1,2]) b=a&amp;gt;0 c=a[b] #a[a&amp;gt;0] print(a,b,c)  输出为：
[ 1 -1 2] [ True False True] [1 2]  这样就可以直接对数组a做大小判断，直接获得符合条件的新数组。</description>
    </item>
    
    <item>
      <title>『小尤里卡』5G应用的畅想</title>
      <link>https://ytysj.github.io/post/2019/6-8-%E5%B0%8F%E5%B0%A4%E9%87%8C%E5%8D%A15g%E5%BA%94%E7%94%A8%E7%9A%84%E7%95%85%E6%83%B3/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/6-8-%E5%B0%8F%E5%B0%A4%E9%87%8C%E5%8D%A15g%E5%BA%94%E7%94%A8%E7%9A%84%E7%95%85%E6%83%B3/</guid>
      <description>因为看了何同学的5G体验视频，结合6月6日工信部提前颁发5G牌照，感觉兴奋至极，仿佛又站在了一个时代风口，对5G应用的畅想不吐不快。
5G时代，最大的特点有：高速度、泛在网、低功耗、低时延。一个一个分析下。
高速度 2G时代的GPRS理论下行速度约为100Kbps这一数量级，3G时代约为6-15Mbps，4G时代在100-300Mbps，5G时代为10Gbps，实际的下载速度往往在1/3左右。
可以看出每代都比上一代快了约一个数量级。用于内容层面的话，最明显的就是2G时代文字流畅，图片加载比较费力。3G时代图片没啥问题，但是视频又要比较长时间。4G时代视频没问题了，但是持续的视频流比如直播等还是会有些小毛病，同时这个时代的VR/AR想做到无线传输还是比较困难，都需要一根线拴着。
不过文字、图片、视频都是在台式PC上早已实现的格式，在2G时代畅想4G时代的视频是没问题的，更高清的分辨率视频是基于以前的最高流媒体形式——视频。如果按照这样的算法，那么5G时代应该是VR/AR比较流畅，然后催生出一种更加吃速度的流媒体格式，用于展望未来，给6G发挥空间。
泛在网 这是指各个地方都有网络存在，包括一些以往不常覆盖的地方，停车场等。因为5G基站的数量需要比4G多很多，这个涉及很高的投资数额，我不知道偏远地区国家还会不会做到覆盖每个角落。我认为泛在网对于偏远地区可能意义不是非常大，城市里更需要5G的无隙不入的覆盖。原因很简单：需要万物互联的时代，不是手机和电脑接入网络就可以了，周围很多物品都需要入网，共同为人们提供服务，如果断网会导致很多服务的缺失或者数据的共享断流。
低功耗 5G的一部分剪裁了功能，为物联网量身定制了低功耗的传输方式，虽然在4G时代就已经有了，但这条路需要继续发展。包在5G网络里是好事。
低时延 这可能是最重要的改变之一，人们终于能将时延降到ms级别，低延时应该可以创造很多往常被延时这个条件禁锢，进入惯性思维不去做的东西。
根据这些特点，我畅想了一些应用，但是我越思考，越觉得思维已经被已经习惯的事物所禁锢，应该好好重新审视一下周围的所有物品。
VR/AR无线传输 低延时加上VR/AR，高速传递的3维模型可以完全构造出一个脱离目前2D屏幕的三维世界。
云设备 可以预感之后的电子设备应该越来越轻便，因为只需要连接云，一切服务都基于云端超级强大的性能，然后通过极低延时传输到终端，那么终端就越来越轻量化，VR/AR等设备也不需要那么繁重，而是轻便的眼镜就行。
物联网 正所谓万物互联，之前的时代也可以通过上级网络，在物与物之间形成连接，但是一个是缺乏基数，还有就是缺乏低功耗、低延迟的协作。有个梅特卡夫定律，说的是一个网络的价值正比于该网络节点数的平方以及联网用户数的平方。
当初大家都能预测到手机性能可以媲美PC，但是问题是当时的PC功能就不够多，也不够便携，大量的想法都被禁锢，所以大家只觉得手机是个移动的电脑，没什么太大的使用必要。但是当手机成网络，发挥出平方下的价值时，我们会发现有那么多以前人们忽略的事物，重新被发掘出来。比如手机微博可以随时随地拍到附近的新事物，这种随处可见的周围事物的价值被重新挖掘出来了。
那么物联网时代，首先最关键的就是要成网，当数量庞大到一定程度，无数终端互相连接迸发的能量，应该远远强于我现在的设想。比如汽车之间的连接可以做到车车互联，那么无人驾驶就可以大大增加公路上的容量，不需要空余那么多位置来预防前方不确定的事件。同样的，物物互联可以提供更多有价值的信息，那种实时性很强，传统方式不容易提供，或者很晚才提供的，此时价值已经接近于无。
比如某饭店排队人很多，奶茶店某品类卖完，家里天然气泄露或水管漏水，可以通过各种设备和传感器及时传输出信息，并且在强有力的云端进行数据分析和整合。然后对每个人给出客制化，专属的行为决策：今天就不去那家饭店和奶茶店了，自动驾驶汽车直接开去另一家有这个种类的，维修公司第一时间上门维修等。
这一趋势应该不只是单纯的改变身边的某些消费者属性的设备，而应该是扩展开来，蔓延到所有制造业制造出的产品，农业可以用物联网及时获知每个产品的状态并及时处理。工业可以整合并提升自动化程度。大量的信息也会需求大量数据库，以及AI处理的强大计算能力。
远程控制 既然已经能做到低时延和VR，那么远程控制设备并体验也可以开始了，由被远程控制的设备来获取外界信息，通过网络实时传输到云另一端的你，身临其境的体验能成为现实。很有可能以后人类不需要出门，却能迅即体验另一端的一切事物，并控制设备与之交互。云义肢成为每个新时代人类的标配。
这些也仅仅是我受禁锢脑子思考出的一点前景，我认为5G既然涉及到产业升级和万物互联，它就势必不像之前的几代一样能低成本、快速的升级，它不是单纯的修改手机的联网速度，而可能是激起新工业时代浪潮的一把金钥匙，开启大门颇费时间，大门后的宝藏，能吓掉每个人的下巴。</description>
    </item>
    
    <item>
      <title>『小尤里卡』一些感想</title>
      <link>https://ytysj.github.io/post/2019/5-20-%E5%B0%8F%E5%B0%A4%E9%87%8C%E5%8D%A1%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/5-20-%E5%B0%8F%E5%B0%A4%E9%87%8C%E5%8D%A1%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</guid>
      <description>前言  希伦二世国王，请金匠用纯金打造了一顶纯金王冠，做好了以后，有人密报金匠造假掺了“白银”在里面，但是又不能把王冠毁坏来鉴定。阿基米德想了好久，一直没有好方法，吃不下饭也睡不好觉。有一天，他在洗澡的时候发现，当他坐在浴盆里时水位上升了，这使得他想到了：“上升了的水位正好应该等于王冠的体积，所以只要拿与王冠等重量的金子，放到水里，测出它的体积，看看它的体积是否与王冠的体积相同，如果王冠体积更大，这就表示其中造了假，掺了银。”
阿基米德想到这里，不禁高兴的从浴盆跳了出来，赤身裸体跑了出去，边跑还边喊着：“尤里卡，尤里卡！”（希腊语:εύρηκα，意即“发现了！”）
经过证明之后，王冠中确实含有白银，阿基米德成功的揭穿了金匠的舞弊诡计，国王对他当然是更加的信服了。
 这个故事可能有后人编造的成分，但是尤里卡一词所代表的发现时的感叹，还有浮力定律，都是确确实实存在的影响。开这个栏目是为了记录一些生活时的灵感以及感触，之所以叫小尤里卡，是因为和阿基米德的浮力定律相比，普通的思考配不上叫尤里卡。
正文 今天外出办银行卡，顺便逛了一下诚品书店，发现有好多新奇或者有趣的玩意，我突然就想到这些新东西，或是新奇的自然景观/人文景观，当分析一下背后原理，其实都非常简单，但冒险家还是为此甘愿牺牲生命，其实是因为有些组合自己空想是想不到的，就需要外力来open your mind。这也就是开阔眼界这词的意义吧。
最近花了两周完成了像素时钟的小项目，主要时间都花在等快递还有尝试发光材料上， 就是为的显示出方方的像素感觉。这个项目我最早看到的时候就立马被吸引了，不是因为它有多厉害，实际上软硬件都非常非常简单，主要就是这个思路实在非常独特，怪不得原版Lametric卖那么贵，的确优秀。
然后我就发现，实际上很多时候我都是在闭门造车，自己关在房间里空想，结果想来想去都是传统的几个简单组合，结果一看别人的思路，豁然开朗，感叹不已。
同时我也发现诚品书店里情侣好多，我也在思考女朋友的问题。像老妈说的，我还是一直在考虑着玩，不像普通的正常人。的确，我就是一直想着享受生活，辛苦读书那么多年，最后工作发现还越来越辛苦，那人生还真的没一点意义了，变成纯粹延续DNA了。但是近来我是越来越无聊，一大堆兴趣里，有些竟然可怕的开始不怎么感兴趣了。
实际上之前我是想着，有了女朋友就有人一起玩了，就没有那么无聊了。但是今天突然想到，其实并不是随便一个人就可以满足这个要求，可能有另一半之后生活更加受束缚，互相的烦恼淹没两人，为了一些可有可无的事情耗费大量精力。很多时候就是我自己给没有到达的未来加了一个很美好的滤镜，但是事实是大部分情况都没有滤镜，只有灰调。当然，最好的情况自然是双方能互相激励，inspire each other。
总结一下吧，为了尤里卡，还是需要多外出走走，接触他人的优秀思维成果，女朋友也不是说有就有。</description>
    </item>
    
    <item>
      <title>零基础搭建VPS</title>
      <link>https://ytysj.github.io/post/2019/5-20-%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BAvps/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/5-20-%E9%9B%B6%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BAvps/</guid>
      <description>前言 搭建VPS的类似教程已经很多了，但是我发现其中还是有不少坑，自己重复一遍也有可能卡住，所以写个文章来记录一下，一来提醒自己，二来方便他人零基础学习。
什么是VPS？ VPS(Virtual Private Server)虚拟专用服务器，是一种将一台物理服务器分割成多个虚拟的服务器的技术，每个划分出的虚拟服务器都能供给不同的人独立使用。对于使用者来说，相当于是用更便宜的价格实现了一个小服务器，但是拥有和实体服务器一样的独立公网IP、操作系统、硬盘空间和CPU资源。一般用于搭建网站、提供服务、跑脚本（如爬虫）等。
和VPN有什么区别？ VPN(Virtual Private Network)虚拟专用网络，实际上是在已有通信线路上搭建了一条虚拟的专用高速通道，连接使用者和另一专用服务器。目前语境下，VPN一般是用于连接到加速器/科学上网服务器。
购买VPS VPS好比是租房，租若干时间，然后这房子随你怎么折腾。有名点的VPS如：Vultr、Bandwagon（搬瓦工）、Linode等，国内有阿里云、腾讯云。注意一般VPS经常有打折或者是优惠码之类的，也有一些比较实惠的促销机型，建议购买之前搜索一下，可以省很多很多钱。
按照注册-&amp;gt;选型-&amp;gt;付费-&amp;gt;收邮件的步骤来，一般最后会得到一个IP地址，以及root账号的密码。
进入系统 这个时候应该通过SSH( Secure Shell)协议来安全地连接你的电脑和VPS服务器，一般有putty(UI较老，开源免费)、xshell(UI比较新，个人使用途径是免费的)，这里我使用xshell。
进入软件之后会要求新建会话，这里我仅作演示，输入VPS服务商给的IP地址和端口号。
然后在用户身份验证处输入用户名和密码，在服务商发的邮件里肯定有写（有的服务商可能需要自己去启用SSH密码）。
然后就能连接VPS机房了，进入的是一个无图形界面的linux终端。
SSH密钥登录保护 这一步一开始我没有做，直到我收到邮件警告，发现我的VPS服务器在对外发垃圾邮件导致被暂停服务，我才注意到这个问题。实际上有很多黑客都在无时不刻的扫描端口，乘隙破解密码，然后用于黑产，之前的root账号密码，密码不够强壮很容易被暴力破解。
那么取代root密码的就是密钥登录验证，具体的原理以后再说，其实就是RSA非对称加密，公钥私钥的问题。配置了这个保护之后，只有在VPS登记过公钥的电脑，用自己的私钥解密VPS发来的加密信息，才能确认登录成功。所以要妥善保管自己的私钥。下面是操作步骤：
1.生成密钥 生成密钥的方式有很多种，如果本机是linux系统，可以在终端输入ssh-keygen -t rsa来生成一对密钥，给密钥加密的密码可以输入或者不输。最后生成两个文件，如id_rsa和id_rsa.pub，前者为私钥，后者为公钥（要发到VPS服务器上）。
xshell也可以生成密钥，在工具-新建用户密钥生成向导里，按照步骤一步一步来，也可轻松地生成密钥。
此处的密码可输入或不输入。
2.把公钥保存在VPS服务器上 将id_rsa.pub文件发送到VPS服务器，首先需要安装lrzsz，可以方便的传输文件。
root用户输入（非root用户在下面命令前面加个sudo）apt-get install lrzsz ，如果是centos用户可以输入yum -y install lrzsz 。
安装完毕之后，到该路径下：cd /root/.ssh/，如果没有这个路径则输入mkdir /root/.ssh/ 创建文件夹。
输入rz回车，就会弹出文件选择窗口，选择id_rsa.pub即可上传文件。
重命名文件：cat .ssh/id_rsa.pub &amp;gt;&amp;gt; .ssh/authorized_keys
执行chmod 600 ./authorized_keys 命令，修改权限；
修改配置文件vim /etc/ssh/sshd_config，将RSAAuthentication 和 PubkeyAuthentication 后面的值都改成yes。
注1：如果没有安装vim则输入apt-get install vim 。
注2：vim默认是命令模式，按下i键才进入编辑模式，然后当修改完毕，按ESC退出编辑模式到命令模式，输入:wq(要输冒号哦)以保存和退出。
重启sshd服务，Debian/Ubuntu输入/etc/init.d/ssh restart ，centos7以前的输入/etc/init.d/sshd restart，centos7以后的输入systemctl restart sshd.service
3.测试密钥连接 和之前设置密码相似，只不过把password选项卡改成public key，然后选择自己的用户私钥，输入自己设置的加密密码。</description>
    </item>
    
    <item>
      <title>计算机系统里中文常见字体来源和版权</title>
      <link>https://ytysj.github.io/post/2019/2019-3-10-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E9%87%8C%E4%B8%AD%E6%96%87%E5%B8%B8%E8%A7%81%E5%AD%97%E4%BD%93%E6%9D%A5%E6%BA%90%E5%92%8C%E7%89%88%E6%9D%83/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/2019-3-10-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E9%87%8C%E4%B8%AD%E6%96%87%E5%B8%B8%E8%A7%81%E5%AD%97%E4%BD%93%E6%9D%A5%E6%BA%90%E5%92%8C%E7%89%88%E6%9D%83/</guid>
      <description>最近有一则关于方正新闻比较火：
 3月5日，微博名为@互联网的那些事 的博主称，某公司实习生使用微软雅黑和盗版PS，结果接到方正集团和adobe起诉，样稿印刷厂印了5000万张已经全国商用，公司损失2860万，裁员8个主管，42人，这位爆料者表示自己也是被裁掉的一员。对此方正字库官微辟谣称，书籍类字库授权费为500元，广告类授权费4500元，且与印刷数量无关。
 网上一搜，发现方正公司这样利用微软雅黑在使用后索赔很多年了。即便你采用正版windows，正版office，自带的微软雅黑字体却不能商用。所以今天就想来好好探讨常见字体（主要是windows下）的来源，以及版权问题。
微软公司有一点做的不太好，早期将简体字体去除公司名称，直接称呼字体类型。如：中易宋体、中易仿宋、中易黑体、中易隶书、中易幼圆，都被称为了宋体、仿宋、黑体、隶书、幼圆。这样就导致很多人认为宋体就是中易宋体，以为所有宋体都不好看。
宋体 宋体（中国大陆一般称宋体，台湾有宋体和明体两种说法，港澳通常称为明体），为衬线字体。原型来自宋朝楷书基本笔画，笔画适合活字印刷，主要盛行于明朝。日本于19世纪制造铅字字模时，称此字体为明朝体。台湾最初的汉字照排系统从日本进口，所以在计算机领域，也依从日本的称谓，称之为明体。
目前宋体是大陆，台湾，香港三地的标准印刷体。
中易宋体、新宋体 中易宋体（SimSun）和新宋体（NSimSun）是由北京中易公司制作，在Windows Vista发布微软雅黑前一直作为简体中文版系统的默认字体。这也是我们最广为熟知的宋体。
新宋体和宋体本质上是一种字体，不过宋体被标记为非等宽, 新宋体标记为等宽。这样做是因为 Windows 的一些软件对字体是否等宽比较敏感, 一些代码类的软件在字体设置上只能选用标记为等宽的字体。
细明体、新细明体 相对应的，繁体中文版系统使用的是细明体（MingLiU）和新细明体（PMingLiU），由威锋数位（原名华康科技）公司模仿日文本兰明朝体制作。
MS明朝、MSP明朝 日文采用的是MS明朝（MS Mincho）和MSP明朝（MS PMincho），由理光公司制作。
思源宋体 思源宋体（Source Han Serif）是Adobe与Google在2017年4月3日发布的开源字体，支持简体中文、繁体中文、日文和韩文，采用SIL开源字体授权，大致意思是不允许单独贩卖字体，若要发售则必需要与其他软件同捆发布（哪怕是一句hello world）。
仿宋 仿宋体创制于近代。真正意义上的仿宋体开始于丁氏兄弟的“聚珍仿宋”。聚珍仿宋整合了大量宋刻本的雕版字体并重新设计。仿宋体采用宋体结构、楷书笔画，较为清秀挺拔，笔画横竖粗细均匀。常用于排印副标题、诗词短文、批注、引文等，在一些读物中也用来排印正文部分。它的字体较为瘦长，有一定倾斜，并且由于字重问题，并不能像宋体那样可以从很粗到很细，有一系列家族字体，因此应用也比较受拘束。在中国大陆，仿宋体是公文的标准字体。windows自带中易仿宋（Simfang）。
黑体 黑体字又称方体或哥特体，与白体（如宋体、仿宋、楷体）对应。没有衬线装饰，字形端正，笔画横平竖直，笔迹全部一样粗细。汉字的黑体是在现代印刷术传入东方后依据西文无衬线体中的黑体所创造的。由于汉字笔划多，小字黑体清晰度较差，所以一开始主要用于文章标题。但随着技术的改进，已有许多适用于正文的黑体字型，尤其是电子屏幕显示，现在基本上以黑体为主。
中易黑体 中易黑体（SimHei）即和中易宋体同时出现的微软XP系统自带字体。
微软雅黑 这则新闻的主要焦点。由于无衬线字体相较于衬线字体更适合在计算机显示器上阅读，并且中易宋体在小字符时不够清晰，没有加入字体微调（hinting），导致某些大小下会出现笔画残缺，断裂或粗细不均的情况。为此，微软委托方正集团设计了一款支持ClearType技术的字体，蒙纳公司（Monotype Corporation）负责了该字体“Regular”、“Bold”字重的字体微调工作，并设计了假名等字符。
最初方正完成了汉字部分的设计，英文部分由蒙纳公司参考Segoe UI变体设计，最后作为微软雅黑（Microsoft YaHei）发布。方正之后继续设计并完善自己的原型，作为方正兰亭黑另外发布。
微软雅黑的版权分为两个部分，在 Windows 系统的内嵌使用，包括屏幕输出和个人使用为目的的打印，这部分微软已经向方正支付了版权授权费用，所有正版 Windows 用户均可免费使用。但以商业发布为目的的微软雅黑版权，仍由北大方正保留。所以若要商用，仍然需要给北大方正交授权费。
微软正黑 微软正黑（Microsoft JhengHei）由蒙纳公司设计，是作为繁体中文版windows Vista系统以后的默认字体。但是这一字体的版权属于微软。
以下是苹果系统下默认字体：
华文细黑/华文黑体 华文细黑（STXihei）和华文黑体（STHeiti）由常州华文公司制作并持有版权，该字体也是苹果在OS X 10.5 Leopard之前的默认字体，分别当 regular 和 bold 用。要注意OS X又将华文黑体（STHeiti）作为一个字体族，可能是泛指 STXihei、STHeiti 以及 Heiti SC Light、Heiti SC Medium、Heiti TC Light、Heiti TC Medium等等。</description>
    </item>
    
    <item>
      <title>python列表复制问题</title>
      <link>https://ytysj.github.io/post/2019/2019-3-6-python%E5%88%97%E8%A1%A8%E5%A4%8D%E5%88%B6%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/2019-3-6-python%E5%88%97%E8%A1%A8%E5%A4%8D%E5%88%B6%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</guid>
      <description>问题发现 在字典/列表等对象里套用字典/对象，并且复制的时候会出现这个情况：
a={ &#39;a1&#39;:{&#39;line&#39;:&#39;l1&#39;,&#39;param&#39;:[0,1,2]}, &#39;a2&#39;:{&#39;line&#39;:&#39;l2&#39;,&#39;param&#39;:2} } print(a) b=a[&#39;a1&#39;].copy() b[&#39;param&#39;][0]=10 print(&#39;===a=====&#39;) print(a) print(&#39;===b=====&#39;) print(b)  执行结果是：
===a before===== {&#39;a1&#39;: {&#39;line&#39;: &#39;l1&#39;, &#39;param&#39;: [0, 1, 2]}, &#39;a2&#39;: {&#39;line&#39;: &#39;l2&#39;, &#39;param&#39;: 2}} ===a after===== {&#39;a1&#39;: {&#39;line&#39;: &#39;l1&#39;, &#39;param&#39;: [10, 1, 2]}, &#39;a2&#39;: {&#39;line&#39;: &#39;l2&#39;, &#39;param&#39;: 2}} ===b after===== {&#39;line&#39;: &#39;l1&#39;, &#39;param&#39;: [10, 1, 2]}  可以发现，为了复制字典a中的字典a1给b，虽然b复制过去了，但是修改b的数值时会将a的值也一并修改。
问题分析 原因和python的复制方式有关，python一共分三种复制
直接赋值 直接赋值就是简单的=，由于python中数字都有固定id，比如语句c = 1意思是将1的id地址放到c的内容中。
而对于列表来说，c = [1,2,3]的意思就是创建了一个新地址ADDR，里面存储[1,2,3]，这个地址赋给了c的内容。所以当再加上一句d = c之后，对d的操作同时也就是对c操作，这时候ADDR也同时赋给了d，所以当修改ADDR里面的内容时，c、d同时变化。
浅复制 和下面的深复制一看就知道区别。浅复制一般是使用自带的函数copy()，如：
c = [1,2,3] d = c.</description>
    </item>
    
    <item>
      <title>python跨文件全局变量问题</title>
      <link>https://ytysj.github.io/post/2019/2019-2-24-python%E8%B7%A8%E6%96%87%E4%BB%B6%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/2019-2-24-python%E8%B7%A8%E6%96%87%E4%BB%B6%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/</guid>
      <description>问题发现 首先是一个使用全局变量的一个文件：
#a.py import b g = 10 def func1(): global g print(g) g += 1 if __name__ ==&#39;__main__&#39; : func1() print(g) b.func2()  不看最后b.func2，很明显结果是
10 11  此时全局变量g已经变成11了。
#b.py import a def func2(): bg = a.g print(bg)  然而当调用b.func2时，打印的数字是10，也就是说a的全局变量的改变并没有传递给b。
问题分析 python内置了id函数，每个地址都有独一无二的id，所以看id就可以很明白的知道数字是多少
#===================a.py====================== import b g = 10 def func1(): global g print(g) g += 1 if __name__ ==&#39;__main__&#39; : print(&amp;quot;id g:&amp;quot;,id(g)) print(&amp;quot;id 10:&amp;quot;,id(10)) func1() print(g) print(&amp;quot;id g:&amp;quot;,id(g)) print(&amp;quot;id g:&amp;quot;,id(11)) b.</description>
    </item>
    
    <item>
      <title>『遨蓝开发日志1』2D游戏地图分层问题</title>
      <link>https://ytysj.github.io/post/2018/2018-11-19-%E9%81%A8%E8%93%9D%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9712d%E6%B8%B8%E6%88%8F%E5%9C%B0%E5%9B%BE%E5%88%86%E5%B1%82%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2018/2018-11-19-%E9%81%A8%E8%93%9D%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9712d%E6%B8%B8%E6%88%8F%E5%9C%B0%E5%9B%BE%E5%88%86%E5%B1%82%E9%97%AE%E9%A2%98/</guid>
      <description>这是一个新系列，用于记录我的独立游戏《遨蓝》的开发过程，之后我会在这里持续更新开发过程中遇到的问题以及解决方式。
一.两个镜头 由于这个游戏是航海探索类游戏，所以不可避免会有人物和船只切换的过程，这个解决比较方便，采用两个GameObject以及两个Camera即可解决。
二.地图分层 地图我采用的是Tiled Map瓦片地图，可以比较方便省力地绘制地图。但是比较麻烦的是这个地图分层问题，由于有两个控制对象，并且他们之间的处理又是互斥的，比如船不能到岸上，人不能到海上。对于这个问题，我想了几个解决方案。
1.地图属性 给每一个地块都赋予特殊的属性，类似于minecraft，检测到不同地块种类，对应不同控制对象，做出不同的反应。比如船+海=行进，人+海=游泳/挣扎，船+沙滩=搁浅不动，人+沙=速度稍稍变慢。但是由于Unity碰撞体的机制，如果要这么做就得每个瓦片都添加collider，感觉不太优雅，不太好优化。并且我没有找到api接口，可以获得这个瓦片的自定义属性，资料很少，这条路卡顿了很久，最后放弃。
注：但是有接口可以获得那个瓦片对应在瓦片地图上的索引坐标，可能如果找到合适的api，配合一个坐标与素材的映射（可以解析.tmx文件），就可以做到。
2.碰撞规则 Unity的Physical setting里可以设置不同layer层级的碰撞规则，我尝试将不同层级分层，但是遇到一个问题，如果要用碰撞器阻拦船只上岸，陆地还是要设置collider，同时为了实现人下海速度慢的效果，海也要设置collider，这样最后还是要给每个瓦片添加collider，而且规则很死，放弃。
3.两个地图 最终我找到的解决方案，很暴力、简单，就是将人和船拆开，并且人对应的地图和船对应的地图也分开，就像在做两个场景，只不过叠在一个地方。
这是测试地图，一开始将这些全部放在一个文件里。
如下两图，现在分成了两个地图文件，上图是陆地，供人物使用，可以发现海洋部分采用land_forbidden层的图块处理，即原来所有的海洋部分。这个图块可以添加collider来达到触发器（游泳）/碰撞器（不能到海里）的效果，可以给buildings层的城堡添加collider达到触发器的效果。
而下图是海洋，供船只使用，可以发现陆地全用sea_forbidden层处理，即船只不需关心岸上有什么东西，反正都不许进入（碰撞器）。
之后就是在Unity里，设置船和海洋地图为Sea层，人和陆地地图为Land层。在Physical setting里设置碰撞规则，Sea层和Land层互相之间不进行碰撞。
这种方法比较简单，当然缺点就是画地图时候比较费心，要分两块存，并且要操心最后合在一起的效果好不好，建议先用一个文件绘制好完整的地图，之后再分层存成两个文件来处理。</description>
    </item>
    
    <item>
      <title>如何在电脑上折叠出SS纸飞机</title>
      <link>https://ytysj.github.io/post/2018/2018-11-10-%E5%A6%82%E4%BD%95%E5%9C%A8%E7%94%B5%E8%84%91%E4%B8%8A%E6%8A%98%E5%8F%A0%E5%87%BA%E7%BA%B8%E9%A3%9E%E6%9C%BA/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2018/2018-11-10-%E5%A6%82%E4%BD%95%E5%9C%A8%E7%94%B5%E8%84%91%E4%B8%8A%E6%8A%98%E5%8F%A0%E5%87%BA%E7%BA%B8%E9%A3%9E%E6%9C%BA/</guid>
      <description>注：本文只涉及客户端，服务端以后再说。
Shadowsocks可以指：一种基于Socks5代理方式的加密传输协议，也可以指实现这个协议的各种传输包。目前包使用Python、C、C++、C#、Go语言等编程语言开发，大部分主要实现（iOS平台的除外）采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。Shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。这个可爱的小纸飞机应该怎么在电脑上折呢？
折纸飞机拢共分四步。
一.获取客户端 github目前正常连接没有什么问题，所以可以在全球最大程序员同性交友网上下载客户端，打开项目之后点击release去下载最新版纸飞机。
解压之后直接打开exe，ss不需要安装，点开即可。
二.配置客户端 右击右下角纸飞机，选择编辑服务器，添加一个新的服务器，输入服务端给你的地址，端口，密码，加密方式。
此处说明一下，右击右下角图标打开“启用系统代理”之后，PAC模式和全局模式的区别：PAC模式指使用软件自带的过滤规则，部分选择代理；而全局模式是所有电脑上的流量均走代理。由于自带的PAC模式不太好使，而且不方便修改，没什么意义。所以一般建议关闭“启用系统代理”，采用浏览器插件的过滤规则。
三.配置浏览器 对于chromium内核浏览器，安装SwitchyOmega这个插件。注：完成第二步的时候，打开全局模式就已经可以登录谷歌了，所以如果使用chrome的也可以直接去谷歌插件商店下载SwitchyOmega。
如果情景模式里面什么都没有的话，可以选择新建情景模式（此处我已经建好了情景模式Shadowsocks，请无视），否则可以在已有的模式上修改。
如此配置这个情景模式的代理服务器和代理端口，这样当在这个情景模式下，就会切换到客户端的代理，从而科学上网。
增加自动切换的情景模式
在情景模式下选择匹配规则时的情景模式“TEST”，默认选择直接连接，这样只有匹配上时才会走代理。
创建规则列表，导入在线规则列表，输入网址， 选择立即更新。
 https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt
 在浏览器插件栏，选择自动切换模式，这时候就可以自动切换了。在打开谷歌时是左边蓝色圆圈，代表开启代理；在打开百度时是右边灰色圆圈，代表直连。如果遇到不在匹配规则内的，比如觉得液态氧斯基的小小站打开太慢，那可以选择添加条件一栏，将情景模式选成ss模式，这样下次走这个网站就是走代理模式了。
四.享受正常上网 Please enjoy!</description>
    </item>
    
    <item>
      <title>《解忧杂货店》之温情</title>
      <link>https://ytysj.github.io/post/2018/2018-10-31-%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97%E4%B9%8B%E6%B8%A9%E6%83%85/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2018/2018-10-31-%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97%E4%B9%8B%E6%B8%A9%E6%83%85/</guid>
      <description>一直很喜欢东野圭吾的小说，但多数为悬疑探案，所以当知道解忧杂货店是个温情的小说时，还是稍稍有些吃惊。当时看了小说，剧情也许很吸引我，可能也很感人，不太记得了，总知是并没多大的触动，就记得个好看。
这次看了电影版，令我吃惊的是上映日期是我的生日，那天我竟然没去看，只能今天在爱奇艺上一览。第一个故事是鱼店音乐人——松冈克郎，留着和乔布斯一样的发型，前去东京做音乐人闯荡。因为奶奶过世和父亲身体不好，纠结自己是否要放弃梦想回家继承鱼店，是个很平淡很平淡的一个故事。可是葬礼上，叔叔劝他回家继承，却当场被他父亲骂的狗血淋头。这时候我已经能体会到父亲的感情了，和我爸一样，可以自己批评，但绝对不允许别人来指责，甚至是干涉自己孩子的梦想。当他去医院看他爸，老头子头一扭，“你给我回东京去”，我眼泪就止也止不住的流。以前类似的看到很多，但一点都没感觉。现在想到我爸，完完全全体会到了为什么老头子这么说。我爸希望我回家，希望我在家过平稳的日子，臭小子你去随便闯，“你混得不好还有我们养着”，但是我要出去闯，他也非常非常非常支持。说我工作很忙，就不要我妈叫我回去，想来他就和这个老头子一样，硬扛，又愿意放手支持孩子去追梦。
对克郎来说，他要坚持的梦想，某种程度上也是为了感激，回报他老爸的这份支持。那克郎这份梦想，又借芹子之口，传播生命的意义给众人，就像歌名《重生》，就是他的意志重生，他的精神永存，他的梦想以一种更加高尚的存在实现，让被他影响的人好好珍视自己的生命。这部分是我最感动最感动的地方。
第二个感人之处，就是这部电影里传递的人与人的信任，大家信任老板所以给他写烦恼，小孩的默契，即便是最淘气的孩子也不去看别人隐私，迷路的幼犬愿意相信她所认为的“老板”并遵照指示，愿意付出努力坚持完成。最后老板的那一封信，从一封空白信纸看出少年的迷惘和无助（表面上却是刚强没有什么要倾诉），写了那一封感人至深的最后的回信。是啊，我们都还是白纸，在这白纸上有着无限的未来，只要你的努力，什么样的未来能都由你来绘制。
一间小破杂货铺，是老板心中的城池，更是点亮无数人心里温暖的一盏明灯，谢谢你，老板。</description>
    </item>
    
    <item>
      <title>迁移到hugo</title>
      <link>https://ytysj.github.io/post/2018/2018-10-07-%E8%BF%81%E7%A7%BB%E5%88%B0hugo/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2018/2018-10-07-%E8%BF%81%E7%A7%BB%E5%88%B0hugo/</guid>
      <description>这两年发生了太多太多的事情，沧海桑田，白驹过隙。
我对原来的jekyll的速度有些不满意，而hugo使用go语言，它天生有着能利用多线程的优秀特点，所以我迁移到hugo，并且在主题（Cat主题）上也花费了一点时间修改，还有不少地方不明白，但是至少能通过冒烟测试嘛~</description>
    </item>
    
    <item>
      <title>极路由1S刷第三方固件及SS配置</title>
      <link>https://ytysj.github.io/post/2016/2016-12-02-%E6%9E%81%E8%B7%AF%E7%94%B11s%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E5%9B%BA%E4%BB%B6%E5%8F%8Ass%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2016/2016-12-02-%E6%9E%81%E8%B7%AF%E7%94%B11s%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E5%9B%BA%E4%BB%B6%E5%8F%8Ass%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 其实我一开始对刷路由器这件事是抵触的，因为感觉好麻烦好辛苦，最后也没啥特别的好处。可是随着GFW的变高，翻它越来越费劲，为了能手机平板PC全部科学上网，我发现极路由在Root之后有ss插件可以直接使用，所以我就愉快的使用上了。
可是好景不长，不久之后我就发现极路由的致命问题——官方固件实在是太不稳定，刚到手更新了一次，WiFi死活连不上，连上也是时断时续，联系微信客服降级后勉强可以使用，可是长时间的使用还是偶尔出现连不上网、WiFi信号弱等问题。同时我发现这个ss功能略少，解析似乎也存在一些问题。
多方因素促成我尝试刷第三方固件——这个美丽的蛋糕。所以写下这个简单的教程，方便像我这样零基础的菜鸟来学习。
一.Root 极路由的Root教程我这里就不放了，根据官方提供的教程来就好，基本过程是申请Root，注册账号，在微信绑定手机号，下载开发者app。此处需要注意的是，极路由Root之后就会失去保修，请斟酌。
二.不死Breed Breed是什么呢？是一个路由器的Bootloader，就是一个引导系统加载的程序，像BIOS就也是一种Bootloader，首先加载Bootloader，之后才运行系统。而由于刷入的第三方固件都是都是在Breed里面完成，因此不管第三方固件是否崩溃，Breed本身是不死的。
首先在这里下载对应Breed，Breed下载点我。
记住要找对路由器的CPU型号，否则可能造成变砖问题！比如我这个是极路由1S新版HC5661A，CPU是MT7628，所以找到breed-mt7628-hiwifi-hc5661a.bin这个文件并下载。
然后下载winscp和putty，这两个是用于访问路由器内部文件，以及作为类似命令行来操作路由器的，可以认为一个是路由器的文件资源管理器，一个是路由器里的CMD终端。
打开winscp，IP：192.168.199.1，账号:root，密码:你的后台密码，端口22，模式SCP。登录进去后，软件左边是电脑的文件，右边是路由器的文件，找到/tmp目录，进去之后把上面找到的Breed拽进去。 然后打开putty，同理输入一样内容，登录进去后输入命令：
mtd -r write /tmp/breed-mt7628-hiwifi-hc5661a.bin u-boot  等待路由器重启即刷入不死Breed。
三.刷入第三方固件 此时由于已经刷入Breed，已经可以随便刷第三方固件了，这里可以刷爱快、RippleOS、海蜘蛛、hiwifi for openwrt、宽带宝、Pandorabox、华硕等固件。
我刷了Pandorabox还有改华硕[N14U N54U]，个人感觉都很不错。潘多拉有多拨、ss，界面非常的漂亮干净，动画有安卓5.0以后版本的感觉。而改华硕，一位大神hiboyhiboyhiboy根据老毛子Padavan固件开发的，主要胜利在稳定，功能强，自带了广告屏蔽、ss、迅雷快鸟、路由宝、花生壳等众多功能。
下载地址： 改华硕， Pandorabox
下载完固件之后，给路由器断电，按住复位键的时候上电，此时按住复位键，等灯闪5秒后再放开。电脑网络配置里选择自动获取DNS，然后浏览器登录192.168.1.1，记住要备份文件，防止以后无法回到官方固件。之后上传固件并点确定，等待一段时间之后刷新即可。
潘多拉的IP为192.168.1.1，账号：root，密码：admin
改华硕的IP为192.168.123.1，账号：admin，密码：admin
四.配置路由器及ss等插件 此时固件已经刷入，进入配置界面设置宽带账号、WiFi名称密码等。
改华硕的扩展功能里ss配置特别简单，也只要填写工作模式、服务器地址等几个简单的框并打开开关，保存配置即可科学上网。至于什么广告屏蔽等功能就留着自己慢慢探索吧！ 至于潘多拉自带的ss配置比较复杂，需要设置好几个界面，可能是由于里面的ChinaDNS的原因，我照着 点我教程 最后并没有成功，这也是我换改华硕的原因。但是潘多拉里的多拨功能倒是的确把我的网速增大了一倍要多（二拨）。
参考： 感谢恩山论坛，大神遍布！
极1S（hc5661)、极2、极硬货刷不死uboot（breed）及N种固件
PandoraBox多拨实现带宽叠加&amp;amp;负载均衡规则策略配置教程（通用）</description>
    </item>
    
    <item>
      <title>如何把照片处理出悬浮效果</title>
      <link>https://ytysj.github.io/post/2016/2016-08-03-%E5%A6%82%E4%BD%95%E6%8A%8A%E7%85%A7%E7%89%87%E5%A4%84%E7%90%86%E5%87%BA%E6%82%AC%E6%B5%AE%E6%95%88%E6%9E%9C/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2016/2016-08-03-%E5%A6%82%E4%BD%95%E6%8A%8A%E7%85%A7%E7%89%87%E5%A4%84%E7%90%86%E5%87%BA%E6%82%AC%E6%B5%AE%E6%95%88%E6%9E%9C/</guid>
      <description>前言 由东京悬浮少女启发，我和ZY同学拍摄并处理出这两张悬浮照片
做法其实非常的简单，就是需要一点点的细心和耐心。
一.拍摄前准备 首先,我们需要一个相机和三脚架，因为如果没有三脚架，很难拍出背景完全相同的图片。同时需要准备好支撑的物件，接触面积越小越好，形状越规则越好。
二.拍摄照片 如图，用凳子，还有手持，拍摄出人、物体的照片，同样，接触面积需要尽可能的小。尽量拍摄速度快点，因为光影会变化，处理起来更麻烦。
三.处理照片 打开PS，把背景放在底部，把人、物体放在上方，抠出图像。
我用的是蒙版抠图法，别的方法也行。对了，我最后处理完之后发现很多照片里有波波出现，就顺便把它也加进来了。最后做一些润色就好了。
四.完成 这样，悬浮照就搞定啦，整个过程大概花了几个小时吧，是不是很简单呢？
最后要感谢ZY同学，发张gif！
参考：
东京悬浮少女摄影组图-Natsumi Hayashi
知乎-悬浮摄影是怎么做到的？</description>
    </item>
    
    <item>
      <title>使用jekyll建立个人网站</title>
      <link>https://ytysj.github.io/post/2016/2016-04-09-%E4%BD%BF%E7%94%A8jekyll%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</link>
      <pubDate>Sat, 09 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2016/2016-04-09-%E4%BD%BF%E7%94%A8jekyll%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</guid>
      <description>前言 本人在4.1日之前属于完完全全不懂github、jekyll、CSS、HTML、markdown这些东西的，但是这几天探索和学习基本算是能看懂并且建立一个完整的博客了。
一.了解背景 首先，我们要了解github和jekyll,也就是我们建立博客的靠山，全靠他们。作为开源代码库以及版本控制系统，github深受程序员的喜爱，堪称是代码届的facebook。在Github上，我们能上传并托管自己的开源项目，也可以从别人的开源项目中fork或是clone东西过来自己修改。
为了方便大家展示自己的开源项目，Github提供了一个免费的网页，不限流量，同时速度也非常可观。而jekyll，正是github的创始人之一，Tom Preston-Werner所开发的一个静态博客系统。同时，网上也提供了大量的主题来给大家使用。我们可以方便地从别人已经提供的成品博客项目那边fork过来，修改参数，即可食用。
各位完全可以把我的github项目fork或者clone出来，自己修改写作。(但是请麻烦您点一下右上角的star来支持一下，谢谢~)ytysj/ytysj.github.io
我也是在阅读某个大神的博客稚晖的个人站里偶然知道可以使用jekyll建立免费博客的。
二.食用方法 我把步骤分为这几步：
1.注册，下载
2.创建项目，开启网页
3.本地环境搭建
4.更改配置
5.开始写文章
6.上传项目，发布网站
1.注册，下载 基本法第一条，注册Github账号！由于需要一个本地端来进行git操作，据说最好使用命令行，不要用客户端。但是我觉得SourceTree，作为git的图形化客户端，毕竟还是方便一些。当然也可以选择其他客户端甚至是命令行。
2.创建项目，开启网页 点击github网页上的加号，选择New repository,新建仓库。
注意，这里Repository name一定要填写username（你的名字）.github.io，这是特殊的命名约定，然后打开仓库，在上面一栏里面选择settings，
然后点击里面的Github Pages下面的Launch page generator，
随便选择主题（没用的），下一步下一步，完成之后就可以通过username.github.io来进入你的主页了。此时的主页是自动生成的，并不是我们需要的东西，目录里多出的几个文件完全可以删掉。
3.本地环境搭建 首先，从ruby官网我们下载Ruby和DevKit，注意要版本符合(也就是x64Ruby下x64的DevKit)。
Ruby的安装很简单，点就是了，安装完之后打开cmd命令行，输入
ruby -v  查看Ruby安装的版本号，出现就说明安装好了。
然后安装DevKit，把压缩包解压到默认的地方(C:\DevKit)，进入DevKit目录，输入
cd c:/DevKit ruby dk.rb init #初始化 ruby dk.rb reviewruby #检查 dk.rb install #安装  cd那一步也可以按住shift右击DevKit文件夹，选择在此处打开命令窗口。
然后更改gem镜像，据说可以改善国内Ruby安装的速度（但是我在这一步选择淘宝镜像以及Ruby China镜像，都出现了ERROR和FAIL的问题&amp;hellip;没办法，最后我什么都没改，用官方的反而搞定了）
gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/ gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org # 请确保只有 ruby.</description>
    </item>
    
    <item>
      <title>做了小小的修改</title>
      <link>https://ytysj.github.io/post/2016/2016-04-04-%E5%81%9A%E4%BA%86%E5%B0%8F%E5%B0%8F%E7%9A%84%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2016/2016-04-04-%E5%81%9A%E4%BA%86%E5%B0%8F%E5%B0%8F%E7%9A%84%E4%BF%AE%E6%94%B9/</guid>
      <description>做了一点小小的美化，学了本地调试，也学了不少的HTML语言，收益颇多。
我打算过几天整理一个教程，方便大家也建立自己的网站。</description>
    </item>
    
    <item>
      <title>上线博客</title>
      <link>https://ytysj.github.io/post/2016/2016-04-02-%E4%B8%8A%E7%BA%BF%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2016/2016-04-02-%E4%B8%8A%E7%BA%BF%E5%8D%9A%E5%AE%A2/</guid>
      <description>折腾了一两天，终于上线了个人网站。</description>
    </item>
    
  </channel>
</rss>