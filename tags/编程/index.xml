<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on 液态氧斯基•小小站</title>
    <link>https://ytysj.github.io/tags/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on 液态氧斯基•小小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 18 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ytysj.github.io/tags/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C/C&#43;&#43;数组的初始化</title>
      <link>https://ytysj.github.io/post/2019/7-18-c%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/7-18-c%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>C/C++里面数组的初始化，一般是这样写的：
int a[4]={0,1,2,3};  即在初始化的时候对每个地址赋值。
为了方便初始化，C/C++如果这样写：
int a[4]={0};  不仅是a[0]初始化为0，剩下的地址也同时初始化为0。
然后因为这个特性，这几天我就以为这样写也可以：
int a[4]={1};  我以为这样写是4个地址都为1。而实际上，只有a[0]为1，其他的地址还是初始化为0。
要想所有地址都为1，还是得循环对每个地址单独赋值。</description>
    </item>
    
    <item>
      <title>numpy array小技巧</title>
      <link>https://ytysj.github.io/post/2019/7-18-numpy-array%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/7-18-numpy-array%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>python里的numpy的array有个小技巧，可以方便的处理数据
import numpy as np a=np.array([1,-1,2]) b=a&amp;gt;0 c=a[b] #a[a&amp;gt;0] print(a,b,c)  输出为：
[ 1 -1 2] [ True False True] [1 2]  这样就可以直接对数组a做大小判断，直接获得符合条件的新数组。</description>
    </item>
    
    <item>
      <title>python列表复制问题</title>
      <link>https://ytysj.github.io/post/2019/2019-3-6-python%E5%88%97%E8%A1%A8%E5%A4%8D%E5%88%B6%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/2019-3-6-python%E5%88%97%E8%A1%A8%E5%A4%8D%E5%88%B6%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</guid>
      <description>问题发现 在字典/列表等对象里套用字典/对象，并且复制的时候会出现这个情况：
a={ &#39;a1&#39;:{&#39;line&#39;:&#39;l1&#39;,&#39;param&#39;:[0,1,2]}, &#39;a2&#39;:{&#39;line&#39;:&#39;l2&#39;,&#39;param&#39;:2} } print(a) b=a[&#39;a1&#39;].copy() b[&#39;param&#39;][0]=10 print(&#39;===a=====&#39;) print(a) print(&#39;===b=====&#39;) print(b)  执行结果是：
===a before===== {&#39;a1&#39;: {&#39;line&#39;: &#39;l1&#39;, &#39;param&#39;: [0, 1, 2]}, &#39;a2&#39;: {&#39;line&#39;: &#39;l2&#39;, &#39;param&#39;: 2}} ===a after===== {&#39;a1&#39;: {&#39;line&#39;: &#39;l1&#39;, &#39;param&#39;: [10, 1, 2]}, &#39;a2&#39;: {&#39;line&#39;: &#39;l2&#39;, &#39;param&#39;: 2}} ===b after===== {&#39;line&#39;: &#39;l1&#39;, &#39;param&#39;: [10, 1, 2]}  可以发现，为了复制字典a中的字典a1给b，虽然b复制过去了，但是修改b的数值时会将a的值也一并修改。
问题分析 原因和python的复制方式有关，python一共分三种复制
直接赋值 直接赋值就是简单的=，由于python中数字都有固定id，比如语句c = 1意思是将1的id地址放到c的内容中。
而对于列表来说，c = [1,2,3]的意思就是创建了一个新地址ADDR，里面存储[1,2,3]，这个地址赋给了c的内容。所以当再加上一句d = c之后，对d的操作同时也就是对c操作，这时候ADDR也同时赋给了d，所以当修改ADDR里面的内容时，c、d同时变化。
浅复制 和下面的深复制一看就知道区别。浅复制一般是使用自带的函数copy()，如：
c = [1,2,3] d = c.</description>
    </item>
    
    <item>
      <title>python跨文件全局变量问题</title>
      <link>https://ytysj.github.io/post/2019/2019-2-24-python%E8%B7%A8%E6%96%87%E4%BB%B6%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ytysj.github.io/post/2019/2019-2-24-python%E8%B7%A8%E6%96%87%E4%BB%B6%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/</guid>
      <description>问题发现 首先是一个使用全局变量的一个文件：
#a.py import b g = 10 def func1(): global g print(g) g += 1 if __name__ ==&#39;__main__&#39; : func1() print(g) b.func2()  不看最后b.func2，很明显结果是
10 11  此时全局变量g已经变成11了。
#b.py import a def func2(): bg = a.g print(bg)  然而当调用b.func2时，打印的数字是10，也就是说a的全局变量的改变并没有传递给b。
问题分析 python内置了id函数，每个地址都有独一无二的id，所以看id就可以很明白的知道数字是多少
#===================a.py====================== import b g = 10 def func1(): global g print(g) g += 1 if __name__ ==&#39;__main__&#39; : print(&amp;quot;id g:&amp;quot;,id(g)) print(&amp;quot;id 10:&amp;quot;,id(10)) func1() print(g) print(&amp;quot;id g:&amp;quot;,id(g)) print(&amp;quot;id g:&amp;quot;,id(11)) b.</description>
    </item>
    
  </channel>
</rss>